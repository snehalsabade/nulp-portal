{"version":3,"sources":["ng://sb-svg2pdf/lib/pdf-download.service.ts","ng://sb-svg2pdf/lib/pdf-download.component.ts","ng://sb-svg2pdf/lib/pdf-download.module.ts","ng://sb-svg2pdf/lib/directives/certificates/certificate-directives-utility.ts","ng://sb-svg2pdf/lib/directives/certificates/certificate-download-as-pdf.service.ts","ng://sb-svg2pdf/lib/directives/certificates/certificate-download-as-pdf.directive.ts","ng://sb-svg2pdf/lib/directives/certificates/certificate-directives.module.ts","ng://sb-svg2pdf/lib/directives/certificates/certificate-download.service.ts","ng://sb-svg2pdf/public_api.ts"],"names":[],"mappings":"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","file":"default~modules-dashboard-dashboard-module-ngfactory~modules-learn-course-consumption-module-ngfacto~9e08451a.js","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PdfDownloadService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sb-pdf-download',\n  template: `\n    <p>\n      pdf-download works!\n    </p>\n  `,\n  styles: []\n})\nexport class PdfDownloadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { PdfDownloadComponent } from './pdf-download.component';\n\n@NgModule({\n  declarations: [PdfDownloadComponent],\n  imports: [\n  ],\n  exports: [PdfDownloadComponent]\n})\nexport class PdfDownloadModule { }\n","export class CertificateDirectivesUtility {\n  static appendGhostDiv(\n    id: string,\n    dimensions: {\n      width: number,\n      height: number\n    }\n  ): HTMLDivElement {\n    const divElement = document.createElement('div');\n    divElement.id = id;\n    // divElement.style.position = 'absolute';\n    divElement.style.left = -dimensions.width + 'px';\n    divElement.style.height = dimensions.height + 'px';\n    divElement.style.width = dimensions.width + 'px';\n    divElement.style.letterSpacing = 'normal';\n    document.body.appendChild(divElement);\n    return divElement;\n  }\n\n  static extractFileName(template: string): string {\n    try {\n      return template.split('/').pop().indexOf('.svg') === -1 ? 'certificate' : template.split('/').pop().split('.svg')[0];\n    } catch (e) {\n      return 'certificate';\n    }\n  }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {CertificateDirectivesUtility} from './certificate-directives-utility';\n\n@Injectable()\nexport class CertificateDownloadAsPdfService {\n\n  constructor(\n    @Inject('DOMTOIMAGE') private domtoimageModule,\n    @Inject('JSPDF') private jsPDFModule,\n  ) {\n  }\n\n  async download(template: string, handlePdfData?: (fileName: string, pdfData: Blob) => void, fileName?: string) {\n    if (template.startsWith('data:image/svg+xml,')) {\n      template = decodeURIComponent(template.replace(/data:image\\/svg\\+xml,/, '')).replace(/\\<!--\\s*[a-zA-Z0-9\\-]*\\s*--\\>/g, '');\n    }\n    const canvasElement = CertificateDirectivesUtility.appendGhostDiv(\n      'sbCertificateDownloadAsPdfCanvas' + Date.now(),\n      {\n        width: 1060,\n        height: 750\n      }\n    );\n\n    canvasElement.innerHTML = template;\n\n    const domtoimage = await this.domtoimageModule;\n\n    domtoimage.toPng(canvasElement, {\n      style: {\n        left: '0',\n        right: '0',\n        bottom: '0',\n        top: '0'\n      }\n    })\n    .then(async (blob) => {\n      const JsPDF = await this.jsPDFModule;\n      const pdf = new JsPDF({\n        orientation: 'landscape',\n        unit: 'pt',\n        format: [\n          1060 / 1.33, 750 / 1.33\n        ]\n      });\n      pdf.addImage(blob, 'PNG', 0, 0);\n\n      fileName = fileName || CertificateDirectivesUtility.extractFileName(template);\n\n      if (handlePdfData) {\n        handlePdfData(fileName + '.pdf', pdf.output('blob'));\n      } else {\n        pdf.save(fileName + '.pdf');\n      }\n\n      canvasElement.remove();\n    });\n  }\n}\n","import {Directive, HostListener, Inject, Input} from '@angular/core';\nimport {CertificateDownloadAsPdfService} from './certificate-download-as-pdf.service';\n\n@Directive({\n  selector: '[sbCertificateDownloadAsPdf]',\n  providers: [CertificateDownloadAsPdfService]\n})\nexport class CertificateDownloadAsPdfDirective {\n  @Input() template: string;\n\n  constructor(\n    @Inject('CANVG') private canvgModule,\n    @Inject('JSPDF') private jsPDFModule,\n    private certificateDownloadAsPdfService: CertificateDownloadAsPdfService\n  ) {\n  }\n\n  @HostListener('click', ['$event'])\n  async onClick($event: MouseEvent) {\n    this.certificateDownloadAsPdfService.download(this.template);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CertificateDownloadAsPdfDirective} from './certificate-download-as-pdf.directive';\n\nexport function normalizeCommonJSImport<T = any>(\n  importPromise: Promise<T>,\n): Promise<T> {\n  // CommonJS's `module.exports` is wrapped as `default` in ESModule.\n  return importPromise.then(function(m: any) {\n    return (m.default || m) as T;\n  });\n}\n\nlet domtoimageImport;\n\nexport function domtoimageFactory() {\n  if (!domtoimageImport) {\n    return normalizeCommonJSImport(\n      // @dynamic\n      import(/* webpackChunkName: \"domtoimage\" */ 'dom-to-image')\n    ).then(function(i) {\n      domtoimageImport = i;\n      return domtoimageImport;\n    });\n  }\n  return domtoimageImport;\n}\n\nlet jspdfImport;\n\nexport function jsPdfFactory() {\n  if (!jspdfImport) {\n    return normalizeCommonJSImport(\n      // @dynamic\n      import(/* webpackChunkName: \"jspdf\" */ 'jspdf')\n    ).then(function(i) {\n      jspdfImport = i;\n      return jspdfImport;\n    });\n  }\n\n  return jspdfImport;\n}\n\n@NgModule({\n  declarations: [\n    CertificateDownloadAsPdfDirective\n  ],\n  exports: [\n    CertificateDownloadAsPdfDirective\n  ],\n  providers: [\n    {provide: 'DOMTOIMAGE', useFactory: domtoimageFactory},\n    {provide: 'JSPDF', useFactory: jsPdfFactory},\n  ]\n})\nexport class CertificateDirectivesModule {\n\n}\n","import {Inject, Injectable} from '@angular/core';\n\n@Injectable()\nexport class CertificateDownloadService {\n  constructor(\n    @Inject('DOMTOIMAGE') private domtoimageModule,\n    @Inject('JSPDF') private jsPDFModule,\n  ) {\n  }\n\n  async buildBlob(certificateContainer: HTMLElement, format: 'pdf' | 'png'): Promise<Blob> {\n    const domtoimage = await this.domtoimageModule;\n    const JsPDF = await this.jsPDFModule;\n    const options = {\n      width: 1060,\n      height: 750,\n      style: {\n        left: '0',\n        right: '0',\n        bottom: '0',\n        top: '0'\n      }\n    };\n\n    if (format === 'png') {\n      return domtoimage.toBlob(certificateContainer, options);\n    }\n\n    const pngUriString: string = await domtoimage.toPng(certificateContainer, options);\n\n    const pdf = new JsPDF({\n      orientation: 'landscape',\n      unit: 'mm',\n      format: [\n        1060 * 0.352778 / 1.333, 750 * 0.352778 / 1.333\n      ]\n    });\n\n    pdf.addImage(pngUriString, 'PNG', 0, 0);\n    return pdf.output('blob') as Blob;\n  }\n}\n","/*\n * Public API Surface of pdf-download\n */\n\nexport * from './lib/pdf-download.service';\nexport * from './lib/pdf-download.component';\nexport * from './lib/pdf-download.module';\nexport * from './lib/directives/certificates/certificate-directives.module';\nexport * from './lib/directives/certificates/certificate-download-as-pdf.service';\nexport * from './lib/directives/certificates/certificate-download.service';\nexport * from './lib/directives/certificates/certificate-download-as-pdf.directive';\n"],"sourceRoot":"webpack:///"}