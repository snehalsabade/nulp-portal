{"version":3,"sources":["./src/app/modules/org-management/components/view-org-type/view-org-type.component.html","./src/app/modules/org-management/org-management-routing.module.ts","./src/app/modules/org-management/services/org-management/org-management.service.ts","./src/app/modules/org-management/components/index.ts","./src/app/modules/org-management/services/org-type/org-type.service.ts","./src/app/modules/org-management/services/index.ts","./src/app/modules/org-management/components/status/status.component.ts","./src/app/modules/org-management/components/organization-upload/organization-upload.component.ts","./src/app/modules/org-management/components/create-org-type/create-org-type.component.html","./src/app/modules/org-management/org-management.module.ts","./src/app/modules/org-management/components/create-org-type/create-org-type.component.ts","./src/app/modules/org-management/components/view-org-type/view-org-type.component.ts"],"names":[],"mappings":"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","file":"default~dashboard-dashboard-module-ngfactory~modules-dashboard-dashboard-module-ngfactory~modules-or~1f625c55.js","sourcesContent":["<div class=\"ui grid\" [appTelemetryImpression]=\"telemetryImpression\">\n    <div class=\"one wide column\"></div>\n    <div class=\"ten wide column mt-10\">\n        <div class=\"ui raised segment\" *ngIf=\"showLoader\">\n            <app-loader></app-loader>\n        </div>\n        <div class=\"ui raised segment\" *ngIf=\"!showLoader\">\n            <div class=\"header announcementCard-header\">\n                <span class=\"header cardsHeading\">{{resourceService?.frmelmnts?.lbl?.orgtypes}}</span>\n                <a class=\"addeditprofile cursor-pointer\" id=\"addOrgType\" [routerLink]=\"['create']\" appTelemetryInteract [telemetryInteractEdata]=\"addOrganizationType\">\n                    <i class=\"big plus icon\"></i>\n                </a>\n            </div>\n            <div class=\"mt-10 \">\n                <span class=\"padded chip mt-5\">\n                    <a class=\"ui label mt-5\" *ngFor=\"let orgnisation of orgTypes;\" appTelemetryInteract\n                        [telemetryInteractObject]=\"{id:orgnisation.id,type:'Organization',ver:'1.0'}\" [telemetryInteractEdata]=\"updateOrganizationType\">\n                        {{orgnisation.name}}\n                        <i class=\"large write icon m-0 pl-10\" [routerLink]=\"['update/' + orgnisation.id]\"></i>\n                    </a>\n                </span>\n            </div>\n        </div>\n    </div>\n    <div class=\"one wide column\"></div>\n</div>\n\n<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {\n  CreateOrgTypeComponent, ViewOrgTypeComponent\n} from './components';\nimport { AuthGuard } from '../core/guard/auth-gard.service';\nconst telemetryEnv = 'org-management';\n\nconst routes: Routes = [\n  {\n    path: 'orgType', component: ViewOrgTypeComponent, canActivate: [AuthGuard],\n    data: {\n      telemetry: {\n        env: telemetryEnv, pageid: 'view-organization-type', type: 'view', subtype: 'paginate'\n      },\n      roles: 'orgType', breadcrumbs: [{ label: 'Home', url: '/home' }, { label: 'Organization Type', url: '' }]\n    },\n    children: [\n      {\n        path: 'create', component: CreateOrgTypeComponent,\n        data: {\n          telemetry: {\n            env: telemetryEnv, pageid: 'create-organization-type', type: 'create', subtype: 'paginate'\n          }\n        }\n      },\n      {\n        path: 'update/:orgId', component: CreateOrgTypeComponent,\n        data: {\n          telemetry: {\n            env: telemetryEnv, pageid: 'update-organization-type', type: 'update', subtype: 'paginate'\n          }\n        }\n      },\n      { path: '**', redirectTo: '' }\n    ]\n  }\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class OrgManagementRoutingModule { }\n\n","import { Injectable } from '@angular/core';\nimport { ConfigService, RequestParam, ServerResponse } from '@sunbird/shared';\nimport { LearnerService } from '@sunbird/core';\nimport { Observable } from 'rxjs';\n  /**\n * This service is used to manage bulk upload of users data or organization data.\n * This service is also used to check status of uploaded file\n */\n@Injectable()\nexport class OrgManagementService {\n  /**\n * reference of config service.\n */\n  public configService: ConfigService;\n  /**\n* reference of learner service.\n*/\n  public learnerService: LearnerService;\n  /**\n* for making upload api calls\n* @param {RequestParam} requestParam interface\n*/\n  constructor(configService: ConfigService, learnerService: LearnerService) {\n    this.learnerService = learnerService;\n    this.configService = configService;\n  }\n    /**\n * This method is used to call upload api to upload organizations file\n */\n  public bulkOrgUpload(req): Observable<ServerResponse> {\n    const httpOptions: RequestParam = {\n      url: this.configService.urlConFig.URLS.ADMIN.BULK.ORGANIZATIONS_UPLOAD,\n      data: req\n    };\n    return this.learnerService.post(httpOptions);\n  }\n      /**\n * This method is used to call status api to get the status of uploaded file\n */\n  getBulkUploadStatus(processId) {\n    const options = {\n      url: this.configService.urlConFig.URLS.ADMIN.BULK.STATUS + '/' + processId\n    };\n    return this.learnerService.get(options);\n  }\n}\n","export * from './create-org-type/create-org-type.component';\nexport * from './view-org-type/view-org-type.component';\nexport * from './organization-upload/organization-upload.component';\nexport * from './status/status.component';\n","\nimport {map} from 'rxjs/operators';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { LearnerService } from '@sunbird/core';\nimport { ConfigService, ServerResponse } from '@sunbird/shared';\nimport { Observable ,  BehaviorSubject } from 'rxjs';\nimport { IorgTypeData } from './../../interfaces';\n\n/**\n * Service to manage organisation type http calls\n */\n@Injectable()\n\n/**\n * @class OrgTypeService to manage organisation type http call\n */\nexport class OrgTypeService {\n\n  /**\n  * BehaviorSubject containing organisation listing data.\n  */\n  private _orgTypeData$ = new BehaviorSubject<IorgTypeData>(undefined);\n\n  /**\n   * Read only observable containing organisation listing data.\n   */\n  public readonly orgTypeData$: Observable<IorgTypeData> = this._orgTypeData$.asObservable();\n\n  /**\n  * To listen event after organisation type update\n  */\n  orgTypeUpdateEvent = new EventEmitter();\n\n  /**\n   * Contains config service reference\n   */\n  public config: ConfigService;\n\n  /**\n   * Contains learner service reference\n   */\n  public learner: LearnerService;\n\n  /**\n   * Default method of class GeoExplorerService\n   *\n   * @param {LearnerService} learner Contains learner service reference\n   * @param {ConfigService} config Contains config service reference\n   */\n  constructor(learner: LearnerService, config: ConfigService) {\n    this.config = config;\n    this.learner = learner;\n  }\n\n  /**\n   * Function to get organisation types\n   */\n  getOrgTypes(): void {\n    const option = {\n      url: this.config.urlConFig.URLS.ORG_TYPE.GET\n    };\n    this.learner.get(option).subscribe(\n      (data: ServerResponse) => {\n        this._orgTypeData$.next({ orgTypeData: data, err: null });\n      },\n      (err: ServerResponse) => {\n        this._orgTypeData$.next({ orgTypeData: null, err: err });\n      }\n    );\n  }\n\n  /**\n   * Function to add organisation type\n   */\n  addOrgType(orgName: string): Observable<ServerResponse> {\n    const option = {\n      url: this.config.urlConFig.URLS.ORG_TYPE.ADD,\n      data: {\n        'request': {\n          'name': orgName\n        }\n      }\n    };\n    return this.learner.post(option).pipe(map(data => {\n      this.getOrgTypes();\n      return data;\n    }));\n  }\n\n  /**\n   * Function to update organisation type\n   */\n  updateOrgType(orgDetails): Observable<ServerResponse> {\n    const option = {\n      url: this.config.urlConFig.URLS.ORG_TYPE.UPDATE,\n      data: {\n        'request': orgDetails\n      }\n    };\n    return this.learner.patch(option).pipe(map(data => {\n      this.orgTypeUpdateEvent.emit(orgDetails);\n      return data;\n    }));\n  }\n}\n\n","export * from  './org-type/org-type.service';\nexport * from './org-management/org-management.service';\n","import { Component, OnInit, OnDestroy, ViewChild, AfterViewInit } from '@angular/core';\nimport { ResourceService, ToasterService, ServerResponse, NavigationHelperService } from '@sunbird/shared';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { OrgManagementService } from '../../services';\nimport { IUserUploadStatusResponse, IOrgUploadStatusResponse } from '../../interfaces';\nimport { IImpressionEventInput, IInteractEventEdata, IInteractEventObject } from '@sunbird/telemetry';\nimport { UserService } from '@sunbird/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n/**\n * This component helps to display the success/failure response given by the api based on the process id entered\n *\n */\n@Component({\n  selector: 'app-status',\n  templateUrl: './status.component.html'\n})\nexport class StatusComponent implements OnInit, OnDestroy, AfterViewInit {\n  @ViewChild('modal') modal;\n  /**\n* reference for ActivatedRoute\n*/\n  public activatedRoute: ActivatedRoute;\n  /**\n* Contains status response\n*/\n  statusResponse: IUserUploadStatusResponse | IOrgUploadStatusResponse;\n  /**\n* Contains process id\n*/\n  processId: string;\n\n  isProcessCompleted: boolean;\n  /**\n* To show toaster(error, success etc) after any API calls\n*/\n  private toasterService: ToasterService;\n  /**\n* To call admin service which helps to upload csv file\n*/\n  public orgManagementService: OrgManagementService;\n  /**\n * To show/hide loader\n */\n  showLoader = false;\n  /**\n   * To call resource service which helps to use language constant\n   */\n  public resourceService: ResourceService;\n  /**\n * status check form name\n */\n  statusForm: FormGroup;\n  /**\n* Contains reference of FormBuilder\n*/\n  sbFormBuilder: FormBuilder;\n  /**\n* Contains redirect url\n*/\n  redirectUrl: string;\n  /**\n\t * telemetryImpression\n\t*/\n  telemetryImpression: IImpressionEventInput;\n  checkStatusInteractEdata: IInteractEventEdata;\n  telemetryInteractObject: IInteractEventObject;\n  public unsubscribe$ = new Subject<void>();\n\n  /**\n* Constructor to create injected service(s) object\n*\n* Default method of DetailsComponent class\n*\n* @param {ResourceService} resourceService To call resource service which helps to use language constant\n*/\n  constructor(orgManagementService: OrgManagementService, private router: Router, formBuilder: FormBuilder,\n    toasterService: ToasterService, resourceService: ResourceService, activatedRoute: ActivatedRoute, public userService: UserService,\n    public navigationhelperService: NavigationHelperService) {\n    this.resourceService = resourceService;\n    this.sbFormBuilder = formBuilder;\n    this.orgManagementService = orgManagementService;\n    this.toasterService = toasterService;\n    this.activatedRoute = activatedRoute;\n  }\n  /**\n * This method is used to initialize the formbuilder and to validate process id form field\n */\n  ngOnInit() {\n    this.activatedRoute.data.subscribe(data => {\n      if (data.redirectUrl) {\n        this.redirectUrl = data.redirectUrl;\n      } else {\n        this.redirectUrl = '/home';\n      }\n    });\n    this.statusForm = this.sbFormBuilder.group({\n      processId: ['', null]\n    });\n    this.setInteractEventData();\n  }\n  /**\n * This method helps to redirect to the parent component\n * page, i.e, bulk upload page\n */\n  public redirect() {\n    this.processId = '';\n    this.router.navigate([this.redirectUrl]);\n  }\n  /**\n * This method helps to fetch bulk upload status based on the given process id\n */\n  getBulkUploadStatus(processId) {\n    this.showLoader = true;\n    if (!(/^\\s+$/.test(this.statusForm.value.processId))) {\n      this.orgManagementService.getBulkUploadStatus(this.statusForm.value.processId.trim()).pipe(\n        takeUntil(this.unsubscribe$))\n        .subscribe(\n          (apiResponse: ServerResponse) => {\n            this.showLoader = false;\n            this.statusResponse = apiResponse.result.response[0];\n            if (this.statusResponse.status && (this.statusResponse.status === 'COMPLETED')) {\n              this.isProcessCompleted = true;\n              this.processId = this.statusResponse.processId;\n              this.toasterService.success(this.resourceService.messages.smsg.m0032);\n            } else {\n              this.isProcessCompleted = false;\n              this.toasterService.info(this.resourceService.messages.imsg.m0040);\n            }\n          }, err => {\n            this.showLoader = false;\n            const errMsg = err.error.params.errmsg ? err.error.params.errmsg : this.resourceService.messages.fmsg.m0051;\n            this.toasterService.error(errMsg);\n          });\n    } else {\n      this.toasterService.error(this.resourceService.messages.stmsg.m0006);\n      this.showLoader = false;\n    }\n  }\n  /**\n * This method helps to get the status result from the api\n */\n  getStatusResult(status) {\n    return status;\n  }\n  ngOnDestroy() {\n    this.modal.deny();\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n  ngAfterViewInit () {\n    setTimeout(() => {\n        this.telemetryImpression = {\n          context: {\n            env: this.activatedRoute.snapshot.data.telemetry.env\n          },\n          edata: {\n            type: this.activatedRoute.snapshot.data.telemetry.type,\n            pageid: 'profile-bulk-upload-check-status',\n            subtype: this.activatedRoute.snapshot.data.telemetry.subtype,\n            uri: this.router.url,\n            duration: this.navigationhelperService.getPageLoadTime()\n          }\n        };\n    });\n  }\n  setInteractEventData() {\n    this.checkStatusInteractEdata = {\n      id: 'upload-status',\n      type: 'click',\n      pageid: 'profile-read'\n    };\n    this.telemetryInteractObject = {\n      id: this.userService.userid,\n      type: 'User',\n      ver: '1.0'\n    };\n  }\n}\n","import { Component, ViewChild, ElementRef, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { ResourceService, ToasterService, ServerResponse, ConfigService, NavigationHelperService } from '@sunbird/shared';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { OrgManagementService } from '../../services';\nimport { IImpressionEventInput, IInteractEventEdata, IInteractEventObject } from '@sunbird/telemetry';\nimport { UserService } from '@sunbird/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as _ from 'lodash-es';\n/**\n * This component helps to upload bulk organizations data (csv file)\n *\n * This component also creates a unique process id on success upload of csv file\n */\n@Component({\n  selector: 'app-organization',\n  templateUrl: './organization-upload.component.html'\n})\nexport class OrganizationUploadComponent implements OnInit, OnDestroy, AfterViewInit {\n  @ViewChild('inputbtn') inputbtn: ElementRef;\n  @ViewChild('modal') modal;\n  /**\n* reference for ActivatedRoute\n*/\n  public activatedRoute: ActivatedRoute;\n  /**\n * To show/hide loader\n */\n  showLoader = false;\n  /**\n* contains upload instructions in an array\n*/\n  orgUploadInstructions: Array<any>;\n  /**\n   * To call resource service which helps to use language constant\n   */\n  public resourceService: ResourceService;\n  /**\n * To call org-management service which helps to upload bulk data\n */\n  public orgManagementService: OrgManagementService;\n  /**\n * reference of config service.\n */\n  public config: ConfigService;\n  /**\n  * Contains unique process id\n  */\n  processId: string;\n  /**\n  * Contains uploaded fileName\n  */\n  fileName: string;\n  /**\n* Contains redirect url\n*/\n  redirectUrl: string;\n  /**\n   * To show toaster(error, success etc) after any API calls\n  */\n  private toasterService: ToasterService;\n  /**\n\t * telemetryImpression\n\t*/\n  telemetryImpression: IImpressionEventInput;\n  orgUploadInteractEdata: IInteractEventEdata;\n  downloadSampleOrgCSVInteractEdata: IInteractEventEdata;\n  telemetryInteractObject: IInteractEventObject;\n  public unsubscribe$ = new Subject<void>();\n  csvOptions = {\n    fieldSeparator: ',',\n    quoteStrings: '\"',\n    decimalseparator: '.',\n    showLabels: true,\n    headers: []\n  };\n  constructor(orgManagementService: OrgManagementService, activatedRoute: ActivatedRoute, toasterService: ToasterService,\n    config: ConfigService, resourceService: ResourceService, public userService: UserService, private router: Router,\n    public navigationhelperService: NavigationHelperService) {\n    this.activatedRoute = activatedRoute;\n    this.orgManagementService = orgManagementService;\n    this.resourceService = resourceService;\n    this.config = config;\n    this.toasterService = toasterService;\n  }\n  /**\n* This method defines array of instructions to be displayed\n*/\n  ngOnInit() {\n    document.body.classList.add('no-scroll'); // This is a workaround  we need to remove it when library add support to remove body scroll\n    this.activatedRoute.data.subscribe(data => {\n      if (data.redirectUrl) {\n        this.redirectUrl = data.redirectUrl;\n      } else {\n        this.redirectUrl = '/home';\n      }\n    });\n    this.orgUploadInstructions = [\n      { instructions: this.resourceService.frmelmnts.instn.t0013 },\n      { instructions: this.resourceService.frmelmnts.instn.t0002 },\n      { instructions: this.resourceService.frmelmnts.instn.t0007 },\n      { instructions: this.resourceService.frmelmnts.instn.t0021 },\n      {\n        instructions: this.resourceService.frmelmnts.instn.t0022,\n        subinstructions: [\n          { instructions: this.resourceService.frmelmnts.instn.t0023 },\n          { instructions: this.resourceService.frmelmnts.instn.t0024 },\n          { instructions: this.resourceService.frmelmnts.instn.t0025 },\n          { instructions: this.resourceService.frmelmnts.instn.t0026 },\n          { instructions: this.resourceService.frmelmnts.instn.t0027 },\n          { instructions: this.resourceService.frmelmnts.instn.t0028 },\n          { instructions: this.resourceService.frmelmnts.instn.t0029 },\n          { instructions: this.resourceService.frmelmnts.instn.t0030 },\n          { instructions: this.resourceService.frmelmnts.instn.t0031 },\n          { instructions: this.resourceService.frmelmnts.instn.t0032 },\n          { instructions: this.resourceService.frmelmnts.instn.t0049 },\n          { instructions: this.resourceService.frmelmnts.instn.t0050 },\n          { instructions: this.resourceService.frmelmnts.instn.t0078 },\n          { instructions: this.resourceService.frmelmnts.instn.t0079 }\n        ]\n      }\n    ];\n    this.setInteractEventData();\n  }\n  /**\n * This method helps to redirect to the parent component\n * page, i.e, bulk upload page\n */\n  public redirect() {\n    this.fileName = '';\n    this.processId = '';\n    this.router.navigate([this.redirectUrl]);\n  }\n  /**\n * This method helps to call uploadOrg method to upload a csv file\n */\n  openImageBrowser(inputbtn) {\n    inputbtn.click();\n  }\n  /**\n * This method helps to upload a csv file and return process id\n */\n  uploadOrg(file) {\n    if (file[0] && file[0].name.match(/.(csv)$/i)) {\n      this.showLoader = true;\n      const formData = new FormData();\n      formData.append('org', file[0]);\n      const fd = formData;\n      this.orgManagementService.bulkOrgUpload(fd).pipe(\n        takeUntil(this.unsubscribe$))\n        .subscribe(\n          (apiResponse: ServerResponse) => {\n            this.showLoader = false;\n            this.processId = apiResponse.result.processId;\n            this.toasterService.success(this.resourceService.messages.smsg.m0031);\n            this.fileName = file[0].name;\n          },\n          err => {\n            this.showLoader = false;\n            const errorMsg = _.get(err, 'error.params.errmsg') ? _.get(err, 'error.params.errmsg').split(/\\../).join('.<br/>') :\n              this.resourceService.messages.fmsg.m0051;\n            this.toasterService.error(errorMsg);\n          });\n    } else if (file[0] && !(file[0].name.match(/.(csv)$/i))) {\n      this.showLoader = false;\n      this.toasterService.error(this.resourceService.messages.stmsg.m0080);\n    }\n  }\n  ngOnDestroy() {\n    document.body.classList.remove('no-scroll'); // This is a workaround we need to remove it when library add support to remove body scroll\n    this.modal.deny();\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  ngAfterViewInit () {\n    setTimeout(() => {\n      this.telemetryImpression = {\n        context: {\n          env: this.activatedRoute.snapshot.data.telemetry.env\n        },\n        edata: {\n          type: this.activatedRoute.snapshot.data.telemetry.type,\n          pageid: 'profile-bulk-upload-organization-upload',\n          subtype: this.activatedRoute.snapshot.data.telemetry.subtype,\n          uri: this.router.url,\n          duration: this.navigationhelperService.getPageLoadTime()\n        }\n      };\n    });\n  }\n\n  setInteractEventData() {\n    this.orgUploadInteractEdata = {\n      id: 'upload-org',\n      type: 'click',\n      pageid: 'profile-read'\n    };\n    this.downloadSampleOrgCSVInteractEdata = {\n      id: 'download-sample-org-csv',\n      type: 'click',\n      pageid: 'profile-read'\n    };\n    this.telemetryInteractObject = {\n      id: this.userService.userid,\n      type: 'User',\n      ver: '1.0'\n    };\n  }\n}\n","<app-modal-wrapper [config]=\"{disableClose: false, size: 'normal'}\" (dismiss)=\"redirect()\" #modal>\n    <ng-template sbModalContent>\n        <div class=\"sb-modal\">\n            <div class=\"transition ui dimmer page modals active visible\">\n                <div class=\"ui modal transition active visible normal\" [appTelemetryImpression]=\"telemetryImpression\">\n\n                    <!--Header-->\n                    <div *ngIf=\"createForm\" class=\"sb-modal-header\">\n                        {{resourceService?.frmelmnts?.lbl?.addorgtype}}\n                    </div>\n                    <div *ngIf=\"!createForm\" class=\"sb-modal-header\">\n                        {{resourceService?.frmelmnts?.lbl?.updateorgtype}}\n                    </div>\n                    <!--/Header-->\n\n                    <!--Content-->\n                    <div class=\"sb-modal-content\">\n                        <div class=\"ui fluid icon input\">\n                            <input *ngIf=\"createForm\" class=\"form-control\" [formControl]=\"orgName\" type=\"text\"\n                                placeholder=\"{{resourceService?.frmelmnts?.lbl?.addorgtype}}\">\n                            <input *ngIf=\"!createForm\" class=\"form-control\" [formControl]=\"orgName\" type=\"text\"\n                                placeholder=\"{{resourceService?.frmelmnts?.lbl?.updateorgtype}}\">\n                        </div>\n                    </div>\n                    <!--/Content-->\n\n                    <!--Actions-->\n                    <div class=\"sb-modal-actions\">\n                        <button class=\"sb-btn sb-btn-normal sb-btn-primary\" *ngIf=\"createForm\" tabindex=\"0\"\n                            (click)=\"disableApproveBtn=true; addOrgType()\" [class.disabled]=\"disabled\"\n                            appTelemetryInteract [telemetryInteractEdata]=\"addOrganizationType\">\n                            {{resourceService?.frmelmnts?.btn?.add}}\n                        </button>\n                        <button class=\"sb-btn sb-btn-normal sb-btn-primary\" *ngIf=\"!createForm\" tabindex=\"0\"\n                            (click)=\"disableApproveBtn=true; updateOrgType()\" [class.disabled]=\"disabled\"\n                            appTelemetryInteract [telemetryInteractEdata]=\"updateOrganizationType\">\n                            {{resourceService?.frmelmnts?.btn?.update}}\n                        </button>\n                        <button class=\"sb-btn sb-btn-normal sb-btn-outline-primary\" tabindex=\"0\" (click)=\"modal.deny()\"\n                            appTelemetryInteract [telemetryInteractEdata]=\"cancelModal\">\n                            {{resourceService?.frmelmnts?.btn?.cancel}}\n                        </button>\n                    </div>\n                    <!--/Actions-->\n\n                </div>\n            </div>\n        </div>\n    </ng-template>\n</app-modal-wrapper>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OrgManagementRoutingModule } from './org-management-routing.module';\nimport { SuiModule } from 'ng2-semantic-ui-v9';\nimport { ResourceService, ToasterService, RouterNavigationService, SharedModule } from '@sunbird/shared';\nimport { OrgTypeService, OrgManagementService } from './services';\nimport {\n  CreateOrgTypeComponent, ViewOrgTypeComponent, OrganizationUploadComponent, StatusComponent\n} from './components';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@sunbird/core';\nimport { TelemetryModule } from '@sunbird/telemetry';\nimport { NgInviewModule } from 'angular-inport';\n// import { Angular2CsvModule } from 'angular2-csv';  Angular2CsvModule removed TODO: use Blob object to generate csv file\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OrgManagementRoutingModule,\n    SharedModule,\n    SuiModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CoreModule,\n    TelemetryModule,\n    NgInviewModule\n  ],\n  declarations: [CreateOrgTypeComponent, ViewOrgTypeComponent, OrganizationUploadComponent, StatusComponent],\n  providers: [ResourceService, ToasterService, RouterNavigationService, OrgTypeService, OrgManagementService]\n})\nexport class OrgManagementModule { }\n\n","import { Component, OnInit, OnDestroy, ViewChild, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ResourceService, ToasterService, RouterNavigationService, ServerResponse, NavigationHelperService } from '@sunbird/shared';\nimport { OrgTypeService } from './../../services/';\nimport { FormControl } from '@angular/forms';\nimport * as _ from 'lodash-es';\nimport { IImpressionEventInput, IInteractEventEdata } from '@sunbird/telemetry';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * This component helps to display the creation/updation popup.\n *\n * It also creates and updates organisation type.\n */\n@Component({\n  selector: 'app-create-org-type',\n  templateUrl: './create-org-type.component.html'\n})\nexport class CreateOrgTypeComponent implements OnInit, OnDestroy, AfterViewInit {\n  public addOrganizationType: IInteractEventEdata;\n  public updateOrganizationType: IInteractEventEdata;\n  public cancelModal: IInteractEventEdata;\n  @ViewChild('modal', {static: true}) modal;\n  pageId: string;\n  /**\n  * telemetryImpression\n  */\n  telemetryImpression: IImpressionEventInput;\n  /**\n  * page uri for telemetry\n  */\n  pageUri: string;\n\n  /**\n\t * This flag helps to identify whether a form is creation or updation.\n   * It is used to display the creation/updation form.\n\t */\n  createForm = true;\n\n  /**\n\t * Creates a object of the form control\n\t */\n  orgName = new FormControl();\n\n  /**\n\t * Contains the organisation type identifier\n\t */\n  orgTypeId: string;\n\n  /**\n   * To send activatedRoute.snapshot to routerNavigationService\n   */\n  public activatedRoute: ActivatedRoute;\n\n  /**\n   * To call resource service which helps to use language constant\n   */\n  public resourceService: ResourceService;\n\n  /**\n   * To show toaster(error, success etc) after any API calls\n   */\n  private toasterService: ToasterService;\n\n  /**\n   * To navigate back to parent component\n   */\n  public routerNavigationService: RouterNavigationService;\n\n  /**\n   * To call OrgType Service for craeting/updating organisation type\n   */\n  public orgTypeService: OrgTypeService;\n\n  public unsubscribe$ = new Subject<void>();\n\n  disableApproveBtn = false;\n\n  /**\n\t * Constructor to create injected service(s) object\n\t *\n\t * Default method of DeleteComponent class\n\t *\n   * @param {ActivatedRoute} activatedRoute Reference of ActivatedRoute\n   * @param {ResourceService} resourceService Reference of ResourceService\n   * @param {ToasterService} toasterService Reference of ToasterService\n   * @param {RouterNavigationService} routerNavigationService Reference of routerNavigationService\n   * @param {OrgTypeService} orgTypeService Reference of OrgTypeService\n\t */\n  constructor(activatedRoute: ActivatedRoute,\n    resourceService: ResourceService,\n    toasterService: ToasterService,\n    routerNavigationService: RouterNavigationService,\n    orgTypeService: OrgTypeService,\n    public navigationhelperService: NavigationHelperService) {\n    this.activatedRoute = activatedRoute;\n    this.resourceService = resourceService;\n    this.toasterService = toasterService;\n    this.routerNavigationService = routerNavigationService;\n    this.orgTypeService = orgTypeService;\n  }\n\n  /**\n   * This method calls the add organisation type API with the organisation\n   * type name.\n   *\n   * After success or failure it is redirected to the organisation type listing page\n   * with proper messaga.\n\t */\n  addOrgType(): void {\n    this.orgTypeService.addOrgType(this.orgName.value).pipe(\n      takeUntil(this.unsubscribe$))\n      .subscribe(\n        (apiResponse: ServerResponse) => {\n          this.toasterService.success(this.resourceService.messages.smsg.m0035);\n          this.modal.deny();\n          this.redirect();\n        },\n        err => {\n          this.toasterService.error(err.error.params.errmsg);\n          this.redirect();\n        }\n      );\n  }\n\n  /**\n   * This method calls the update organisation type API with a object of\n   * organisation type identifier and name.\n   *\n   * After success or failure it is redirected to the organisation type listing page\n   * with proper messaga.\n\t */\n  updateOrgType(): void {\n    const param = { 'id': this.orgTypeId, 'name': this.orgName.value };\n    this.orgTypeService.updateOrgType(param).pipe(\n      takeUntil(this.unsubscribe$))\n      .subscribe(\n        (apiResponse: ServerResponse) => {\n          this.toasterService.success(this.orgName.value + ' ' + this.resourceService.messages.smsg.m0037);\n          this.modal.deny();\n          this.redirect();\n        },\n        err => {\n          this.toasterService.error(err.error.params.errmsg);\n          this.redirect();\n        }\n      );\n  }\n\n  /**\n   * This method helps to redirect to the parent component\n   * page, i.e, view organisation type page\n\t *\n\t */\n  redirect(): void {\n    this.routerNavigationService.navigateToParentUrl(this.activatedRoute.snapshot);\n  }\n\n  /**\n   * This method helps to identify that the page is creation\n   * or updation by subscribing the actiavtedRoute url.\n   *\n   * It also sets the data to the updation form by subscribing the\n   * activatedRoute param\n\t */\n  ngOnInit() {\n    this.activatedRoute.url.subscribe(url => {\n      if (url[0].path === 'update') {\n        this.createForm = false;\n        this.pageUri = 'orgType/update/' + this.orgTypeId;\n        this.pageId = 'update-organization-type';\n        this.orgTypeService.orgTypeData$.subscribe((orgTypeList) => {\n          if (orgTypeList && orgTypeList.orgTypeData) {\n            _.find(orgTypeList.orgTypeData.result.response, (orgList) => {\n              this.orgTypeId = this.activatedRoute.snapshot.params.orgId;\n              if (orgList.id === this.orgTypeId) {\n                this.orgName = new FormControl(orgList.name);\n                return true;\n              }\n            });\n          }\n        });\n      } else if (url[0].path === 'create') {\n        this.createForm = true;\n        this.pageUri = 'orgType/create';\n        this.pageId = 'create-organization-type';\n      }\n    });\n    this.setInteractEventData();\n  }\n\n  setInteractEventData() {\n    this.addOrganizationType = {\n      id: 'create-organization-type',\n      type: 'click',\n      pageid: this.pageId\n    };\n    this.updateOrganizationType = {\n      id: 'update-organization-type',\n      type: 'click',\n      pageid: this.pageId\n    };\n    this.cancelModal = {\n      id: 'cancel',\n      type: 'click',\n      pageid: this.pageId\n    };\n  }\n\n  ngAfterViewInit () {\n    setTimeout(() => {\n      this.telemetryImpression = {\n        context: {\n          env: this.activatedRoute.snapshot.data.telemetry.env\n        },\n        edata: {\n          type: this.activatedRoute.snapshot.data.telemetry.type,\n          pageid: this.pageId,\n          uri: this.pageUri,\n          subtype: this.activatedRoute.snapshot.data.telemetry.subtype,\n          duration: this.navigationhelperService.getPageLoadTime()\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n\n","import { Subscription } from 'rxjs';\nimport { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport * as _ from 'lodash-es';\nimport { ResourceService, ToasterService, NavigationHelperService } from '@sunbird/shared';\nimport { OrgTypeService } from './../../services';\nimport { IImpressionEventInput, IInteractEventEdata } from '@sunbird/telemetry';\n\n/**\n * The component helps to display all the organisation types\n * that has been added by the user having system adminstartion role\n */\n@Component({\n  selector: 'app-view-org-type',\n  templateUrl: './view-org-type.component.html'\n})\nexport class ViewOrgTypeComponent implements OnInit, OnDestroy, AfterViewInit {\n  public addOrganizationType: IInteractEventEdata;\n  public updateOrganizationType: IInteractEventEdata;\n  /**\n  * telemetryImpression\n  */\n  telemetryImpression: IImpressionEventInput;\n\n  /**\n\t * This variable hepls to show and hide page loader.\n   * It is kept true by default as at first when we comes\n   * to a page the loader should be displayed before showing\n   * any data\n\t */\n  showLoader = true;\n\n  /**\n   * Contains all the organisation type data\n   */\n  orgTypes: object;\n\n  /**\n   * To navigate to other pages\n   */\n  route: Router;\n\n  /**\n   * To send activatedRoute.snapshot to router navigation\n   * service for redirection to parent component\n   */\n  private activatedRoute: ActivatedRoute;\n  /**\n   * To call resource service which helps to use language constant\n   */\n  public resourceService: ResourceService;\n\n  /**\n   * To show toaster(error, success etc) after any API calls\n   */\n  private toasterService: ToasterService;\n\n  /**\n   * To call OrgType Service for getting the listing\n   */\n  public orgTypeService: OrgTypeService;\n  orgTypeSubscription: Subscription;\n  orgUpdateSubscription: Subscription;\n\n  /**\n\t * Constructor to create injected service(s) object\n\t *\n\t * Default method of AnnouncementService class\n\t *\n   * @param {Router} route Reference of Router\n   * @param {ActivatedRoute} activatedRoute Reference of ActivatedRoute\n   * @param {ResourceService} resourceService Reference of ResourceService\n   * @param {ToasterService} toasterService Reference of ToasterService\n   * @param {OrgTypeService} orgTypeService Reference of OrgTypeService\n\t */\n  constructor(route: Router,\n    activatedRoute: ActivatedRoute,\n    resourceService: ResourceService,\n    toasterService: ToasterService,\n    orgTypeService: OrgTypeService,\n    public navigationhelperService: NavigationHelperService) {\n    this.route = route;\n    this.activatedRoute = activatedRoute;\n    this.resourceService = resourceService;\n    this.toasterService = toasterService;\n    this.orgTypeService = orgTypeService;\n  }\n\n  /**\n   * This method helps to display the organisation\n   * type listing data\n\t *\n\t */\n  populateOrgType(): void {\n    this.orgTypeService.getOrgTypes();\n    this.orgTypeSubscription = this.orgTypeService.orgTypeData$.subscribe((apiResponse) => {\n      if (apiResponse && apiResponse.orgTypeData) {\n        this.orgTypes = { ...apiResponse.orgTypeData.result.response };\n        this.orgTypes = _.sortBy(this.orgTypes, (orgTypeList: any) => orgTypeList.name.toLowerCase());\n        this.showLoader = false;\n      } else if (apiResponse && apiResponse.err) {\n        this.showLoader = false;\n        this.toasterService.error(this.resourceService.messages.emsg.m0005);\n      }\n    });\n  }\n\n  /**\n   * This method calls the populateOrgType function\n   * to get the organisation listing data.\n   *\n   * It also updates the listing data when a organisation type is\n   * added or updated by subscribing the events after\n   * creation/updation od organisation types.\n\t *\n\t */\n  ngOnInit() {\n    this.populateOrgType();\n    this.setInteractEventData();\n\n    // Update event\n    this.orgUpdateSubscription = this.orgTypeService.orgTypeUpdateEvent.subscribe(data => {\n      _.each(this.orgTypes, (key: any, index) => {\n        if (data && data.id === key.id) {\n          this.orgTypes[index].name = data.name;\n        }\n      });\n    });\n  }\n\n  setInteractEventData() {\n    this.addOrganizationType = {\n      id: 'add-organization-type',\n      type: 'click',\n      pageid: 'view-organization-type'\n    };\n    this.updateOrganizationType = {\n      id: 'update-organization-type',\n      type: 'click',\n      pageid: 'view-organization-type'\n    };\n  }\n\n  ngAfterViewInit () {\n    setTimeout(() => {\n      this.telemetryImpression = {\n        context: {\n          env: this.activatedRoute.snapshot.data.telemetry.env\n        },\n        edata: {\n          type: this.activatedRoute.snapshot.data.telemetry.type,\n          pageid: this.activatedRoute.snapshot.data.telemetry.pageid,\n          uri: 'orgType',\n          subtype: this.activatedRoute.snapshot.data.telemetry.subtype,\n          duration: this.navigationhelperService.getPageLoadTime()\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.orgTypeSubscription) {\n      this.orgTypeSubscription.unsubscribe();\n    }\n\n    if (this.orgUpdateSubscription) {\n      this.orgUpdateSubscription.unsubscribe();\n    }\n  }\n}\n\n"],"sourceRoot":"webpack:///"}