{"version":3,"file":"static/js/3359.8eb870dd.chunk.js","mappings":"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","sources":["../../common-lib/node_modules/react-chartjs-2/src/utils.ts","../../common-lib/node_modules/react-chartjs-2/src/chart.tsx","../../common-lib/node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  Object.assign(chart.options, nextOptions);\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","getDatasetAtEvent","chart","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","param","height","width","redraw","type","options","plugins","fallbackContent","updateMode","props","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","nextOptions","config","setTimeout","update","React","role","Chart","forwardRef","createTypedChart","registerables","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sourceRoot":""}