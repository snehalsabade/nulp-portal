{"version":3,"file":"static/js/9560.11813859.chunk.js","mappings":"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","sources":["../../common-lib/node_modules/react-native-safe-area-context/lib/module/NativeSafeAreaProvider.tsx","../../common-lib/node_modules/react-native-safe-area-context/lib/module/SafeAreaContext.tsx","../../common-lib/node_modules/react-native-safe-area-context/lib/module/SafeAreaView.tsx","../../common-lib/node_modules/react-native-safe-area-context/lib/module/InitialWindow.ts"],"sourcesContent":["/* eslint-env browser */\n\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NativeSafeAreaProviderProps } from './SafeArea.types';\n\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions: Record<string, string> = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd',\n};\n\nexport default function NativeSafeAreaView({\n  children,\n  style,\n  onInsetsChange,\n}: NativeSafeAreaProviderProps) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n    const onEnd = () => {\n      const { paddingTop, paddingBottom, paddingLeft, paddingRight } =\n        window.getComputedStyle(element);\n\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0,\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight,\n      };\n      // @ts-ignore: missing properties\n      onInsetsChange({ nativeEvent: { insets, frame } });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n\n  return <View style={style}>{children}</View>;\n}\n\nlet _supportedTransitionEvent: string | null = null;\nfunction getSupportedTransitionEvent(): string {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n  const element = document.createElement('invalidtype');\n\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (const key in CSSTransitions) {\n    if (element.style[key as keyof CSSStyleDeclaration] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent;\n}\n\ntype CssEnv = 'constant' | 'env';\n\nlet _supportedEnv: CssEnv | null = null;\nfunction getSupportedEnv(): CssEnv {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  const { CSS } = window;\n  if (\n    CSS &&\n    CSS.supports &&\n    CSS.supports('top: constant(safe-area-inset-top)')\n  ) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\n\nfunction getInset(side: string): string {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement(): HTMLElement {\n  const element = document.createElement('div');\n  const { style } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n","import * as React from 'react';\nimport { Dimensions, StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport NativeSafeAreaProvider from './NativeSafeAreaProvider';\nimport { EdgeInsets, InsetChangedEvent, Metrics, Rect } from './SafeArea.types';\n\nexport const SafeAreaInsetsContext = React.createContext<EdgeInsets | null>(\n  null,\n);\nSafeAreaInsetsContext.displayName = 'SafeAreaInsetsContext';\n\nexport const SafeAreaFrameContext = React.createContext<Rect | null>(null);\nSafeAreaFrameContext.displayName = 'SafeAreaFrameContext';\n\nexport interface SafeAreaViewProps {\n  children?: React.ReactNode;\n  initialMetrics?: Metrics | null;\n  /**\n   * @deprecated\n   */\n  initialSafeAreaInsets?: EdgeInsets | null;\n  style?: StyleProp<ViewStyle>;\n}\n\nexport function SafeAreaProvider({\n  children,\n  initialMetrics,\n  initialSafeAreaInsets,\n  style,\n}: SafeAreaViewProps) {\n  const parentInsets = useParentSafeAreaInsets();\n  const parentFrame = useParentSafeAreaFrame();\n  const [insets, setInsets] = React.useState<EdgeInsets | null>(\n    initialMetrics?.insets ?? initialSafeAreaInsets ?? parentInsets ?? null,\n  );\n  const [frame, setFrame] = React.useState<Rect>(\n    initialMetrics?.frame ??\n      parentFrame ?? {\n        // Backwards compat so we render anyway if we don't have frame.\n        x: 0,\n        y: 0,\n        width: Dimensions.get('window').width,\n        height: Dimensions.get('window').height,\n      },\n  );\n  const onInsetsChange = React.useCallback(\n    (event: InsetChangedEvent) => {\n      const {\n        nativeEvent: { frame: nextFrame, insets: nextInsets },\n      } = event;\n\n      if (\n        // Backwards compat with old native code that won't send frame.\n        nextFrame &&\n        (nextFrame.height !== frame.height ||\n          nextFrame.width !== frame.width ||\n          nextFrame.x !== frame.x ||\n          nextFrame.y !== frame.y)\n      ) {\n        setFrame(nextFrame);\n      }\n\n      if (\n        !insets ||\n        nextInsets.bottom !== insets.bottom ||\n        nextInsets.left !== insets.left ||\n        nextInsets.right !== insets.right ||\n        nextInsets.top !== insets.top\n      ) {\n        setInsets(nextInsets);\n      }\n    },\n    [frame, insets],\n  );\n\n  return (\n    <NativeSafeAreaProvider\n      style={[styles.fill, style]}\n      onInsetsChange={onInsetsChange}\n    >\n      {insets != null ? (\n        <SafeAreaFrameContext.Provider value={frame}>\n          <SafeAreaInsetsContext.Provider value={insets}>\n            {children}\n          </SafeAreaInsetsContext.Provider>\n        </SafeAreaFrameContext.Provider>\n      ) : null}\n    </NativeSafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fill: { flex: 1 },\n});\n\nfunction useParentSafeAreaInsets(): EdgeInsets | null {\n  return React.useContext(SafeAreaInsetsContext);\n}\n\nfunction useParentSafeAreaFrame(): Rect | null {\n  return React.useContext(SafeAreaFrameContext);\n}\n\nexport function useSafeAreaInsets(): EdgeInsets {\n  const safeArea = React.useContext(SafeAreaInsetsContext);\n  if (safeArea == null) {\n    throw new Error(\n      'No safe area insets value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.',\n    );\n  }\n  return safeArea;\n}\n\nexport function useSafeAreaFrame(): Rect {\n  const frame = React.useContext(SafeAreaFrameContext);\n  if (frame == null) {\n    throw new Error(\n      'No safe area frame value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.',\n    );\n  }\n  return frame;\n}\n\nexport function withSafeAreaInsets<T>(\n  WrappedComponent: React.ComponentType<T>,\n) {\n  return React.forwardRef((props: T, ref: React.Ref<T>) => (\n    <SafeAreaConsumer>\n      {(insets) => <WrappedComponent {...props} insets={insets} ref={ref} />}\n    </SafeAreaConsumer>\n  ));\n}\n\n/**\n * @deprecated\n */\nexport function useSafeArea(): EdgeInsets {\n  return useSafeAreaInsets();\n}\n\n/**\n * @deprecated\n */\nexport const SafeAreaConsumer = SafeAreaInsetsContext.Consumer;\n\n/**\n * @deprecated\n */\nexport const SafeAreaContext = SafeAreaInsetsContext;\n","import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from './SafeAreaContext';\nimport { Edge, NativeSafeAreaViewProps } from './SafeArea.types';\n\n// prettier-ignore\nconst TOP    = 0b1000,\n      RIGHT  = 0b0100,\n      BOTTOM = 0b0010,\n      LEFT   = 0b0001,\n      ALL    = 0b1111;\n\n/* eslint-disable no-bitwise */\n\nconst edgeBitmaskMap: Record<Edge, number> = {\n  top: TOP,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT,\n};\n\nexport function SafeAreaView({\n  style = {},\n  mode,\n  edges,\n  ...rest\n}: NativeSafeAreaViewProps) {\n  const insets = useSafeAreaInsets();\n\n  const edgeBitmask =\n    edges != null\n      ? edges.reduce((accum, edge) => accum | edgeBitmaskMap[edge], 0)\n      : ALL;\n\n  const appliedStyle = React.useMemo(() => {\n    const insetTop = edgeBitmask & TOP ? insets.top : 0;\n    const insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    const insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n\n    const flatStyle = StyleSheet.flatten(style) as Record<string, number>;\n\n    if (mode === 'margin') {\n      const {\n        margin = 0,\n        marginVertical = margin,\n        marginHorizontal = margin,\n        marginTop = marginVertical,\n        marginRight = marginHorizontal,\n        marginBottom = marginVertical,\n        marginLeft = marginHorizontal,\n      } = flatStyle;\n\n      const marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft,\n      };\n\n      return [style, marginStyle];\n    } else {\n      const {\n        padding = 0,\n        paddingVertical = padding,\n        paddingHorizontal = padding,\n        paddingTop = paddingVertical,\n        paddingRight = paddingHorizontal,\n        paddingBottom = paddingVertical,\n        paddingLeft = paddingHorizontal,\n      } = flatStyle;\n\n      const paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft,\n      };\n\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n\n  return <View style={appliedStyle} {...rest} />;\n}\n","import { EdgeInsets, Metrics } from './SafeArea.types';\n\nexport const initialWindowMetrics: Metrics | null = null;\n\n/**\n * @deprecated\n */\nexport const initialWindowSafeAreaInsets: EdgeInsets | null = null;\n"],"names":["CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","NativeSafeAreaView","_ref","children","style","onInsetsChange","React","document","element","createElement","position","left","top","width","height","zIndex","overflow","visibility","transitionDuration","transitionProperty","transitionDelay","paddingTop","getInset","paddingBottom","paddingLeft","paddingRight","createContextElement","body","appendChild","onEnd","window","getComputedStyle","insets","parseInt","bottom","right","frame","x","y","documentElement","offsetWidth","offsetHeight","nativeEvent","addEventListener","getSupportedTransitionEvent","removeChild","removeEventListener","View","_supportedTransitionEvent","key","undefined","_supportedEnv","side","concat","CSS","supports","getSupportedEnv","SafeAreaInsetsContext","displayName","SafeAreaFrameContext","SafeAreaProvider","_ref4","initialMetrics","initialSafeAreaInsets","_ref2","_initialMetrics$inset","_ref3","_initialMetrics$frame","parentInsets","parentFrame","setInsets","setFrame","Dimensions","event","nextFrame","nextInsets","NativeSafeAreaProvider","styles","fill","Provider","value","StyleSheet","flex","useSafeAreaInsets","safeArea","Error","useSafeAreaFrame","withSafeAreaInsets","WrappedComponent","props","ref","SafeAreaConsumer","_extends","useSafeArea","Consumer","SafeAreaContext","TOP","RIGHT","BOTTOM","LEFT","ALL","edgeBitmaskMap","SafeAreaView","mode","edges","rest","edgeBitmask","reduce","accum","edge","appliedStyle","insetTop","insetRight","insetBottom","insetLeft","flatStyle","margin","marginVertical","marginHorizontal","marginTop","marginRight","marginBottom","marginLeft","padding","paddingVertical","paddingHorizontal","initialWindowMetrics","initialWindowSafeAreaInsets"],"sourceRoot":""}