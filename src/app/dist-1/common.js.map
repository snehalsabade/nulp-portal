{"version":3,"sources":["./src/app/modules/public/module/signup/services/index.ts","./node_modules/@angular/material/icon/index.d.ts.MatIcon.html","./src/app/modules/public/module/signup/services/signup/signup.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["export * from './signup/signup.service';\n\n","<ng-content></ng-content>","import { Injectable } from '@angular/core';\nimport { LearnerService } from '@sunbird/core';\nimport { ConfigService } from '@sunbird/shared';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignupService {\n\n  constructor(private learnerService: LearnerService, public configService: ConfigService,\n              private http: HttpClient) {\n  }\n\n  generateOTP(data) {\n    const options = {\n      url: this.configService.urlConFig.URLS.OTP.GENERATE,\n      data: data\n    };\n    return this.learnerService.post(options);\n  }\n\n  generateOTPforAnonymousUser(data, captchaResponse) {\n    const options = {\n      url: this.configService.urlConFig.URLS.OTP.ANONYMOUS.GENERATE + '?captchaResponse=' + captchaResponse,\n      data: data\n    };\n    return this.learnerService.post(options);\n  }\n\n  verifyOTP(data) {\n    const options = {\n      url: this.configService.urlConFig.URLS.OTP.VERIFY,\n      data: data\n    };\n    return this.learnerService.post(options);\n  }\n\n  getUserByKey(data) {\n    const options = {\n      url: this.configService.urlConFig.URLS.USER.GET_USER_BY_KEY + '/' + data,\n    };\n    return this.learnerService.get(options);\n  }\n\n  checkUserExists(data) {\n    const options = {\n      url: this.configService.urlConFig.URLS.USER.CHECK_USER_EXISTS + '/' + data,\n    };\n    return this.learnerService.get(options);\n  }\n\n  createUser(data) {\n    const options = {\n      url: this.configService.urlConFig.URLS.USER.CREATE_V2,\n      data: data\n    };\n    return this.learnerService.post(options);\n  }\n\n  /**\n   * Accepts Terms and conditions and generate token of user\n   * @param data\n   */\n  acceptTermsAndConditions(data) {\n    const url = this.configService.urlConFig.URLS.USER.TNC_ACCEPT_LOGIN;\n    return this.http.post(url, data);\n  }\n\n  createUserV3(data) {\n    const options = {\n      url: this.configService.urlConFig.URLS.USER.SIGN_UP_V1,\n      data: data\n    };\n    return this.learnerService.post(options);\n  }\n}\n"],"sourceRoot":"webpack:///"}